CREATE TABLE Customer (
    customerID     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    accountID      NUMBER NOT NULL UNIQUE,
    points         NUMBER DEFAULT 0 CHECK (points >= 0)
);

CREATE TABLE Admin (
    adminID        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    accountID      NUMBER NOT NULL UNIQUE,
    role           VARCHAR2(50)
);

CREATE TABLE Account (
    accountID      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email          VARCHAR2(100) UNIQUE NOT NULL CHECK (
    email LIKE '%@%.%' OR email LIKE'%.%@%.%'AND email NOT LIKE '@%' AND email NOT LIKE '%@%@%'   ),
    password       VARCHAR2(100) NOT NULL,
    dateJoined     DATE DEFAULT SYSDATE,
    firstName      VARCHAR2(50),
    lastName       VARCHAR2(50),
    phoneNumber    VARCHAR2(20) CHECK (REGEXP_LIKE(phoneNumber, '[[:digit:]]{9,10}?|[[:digit:]]{3}-[[:digit:]]{3}-[[:digit:]]{4}')),
    address        VARCHAR2(200),
    accountType    VARCHAR2(20) CHECK (accountType IN ('CUSTOMER','ADMIN'))
);

ALTER TABLE admin ADD(
    FOREIGN KEY (accountID) REFERENCES Account(accountID)
);

ALTER TABLE Customer ADD(
    FOREIGN KEY (accountID) REFERENCES Account(accountID)
);

CREATE TABLE Movie (
    movieID        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title          VARCHAR2(200) NOT NULL,
    genre          VARCHAR2(50),
    director       VARCHAR2(100),
    cast           VARCHAR2(500),
    releaseDate    DATE,
    length         NUMBER,
    price          NUMBER(6,2) CHECK (price >= 0)
);

CREATE TABLE Review (
    reviewID       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    movieID        NUMBER NOT NULL,
    customerID     NUMBER NOT NULL,
    rating         NUMBER CHECK (rating BETWEEN 1 AND 5),
    reviewText     VARCHAR2(1000),
    reviewDate     DATE DEFAULT SYSDATE,
    FOREIGN KEY (movieID) REFERENCES Movie(movieID),
    FOREIGN KEY (customerID) REFERENCES Customer(customerID)
);

CREATE TABLE Orders (
    orderID        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customerID     NUMBER NOT NULL,
    orderDate      DATE DEFAULT SYSDATE,
    amount         NUMBER(8,2) CHECK (amount >= 0),
    FOREIGN KEY (customerID) REFERENCES Customer(customerID)
);

CREATE TABLE OrderDetails (
    purchaseID     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    orderID        NUMBER NOT NULL,
    movieID        NUMBER NOT NULL,
    quantity       NUMBER DEFAULT 1 CHECK (quantity > 0),
    FOREIGN KEY (orderID) REFERENCES Orders(orderID),
    FOREIGN KEY (movieID) REFERENCES Movie(movieID)
);

-- CREATE TABLE Deals (
--     dealID         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--     dealName       VARCHAR2(100) NOT NULL,
--     startDate      DATE NOT NULL,
--     endDate        DATE NOT NULL,
--     bonusPoints    NUMBER DEFAULT 0 CHECK (bonusPoints >= 0)
-- );

-- CREATE TABLE CustomerDeals (
--     customerID     NUMBER NOT NULL,
--     dealID         NUMBER NOT NULL,
--     PRIMARY KEY (customerID, dealID),
--     FOREIGN KEY (customerID) REFERENCES Customer(customerID),
--     FOREIGN KEY (dealID) REFERENCES Deals(dealID)
-- );

CREATE TABLE StorePromotions (
    promotionID     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    startDate       DATE NOT NULL,
    endDate         DATE NOT NULL,
    pointsIncrease  NUMBER DEFAULT 0 CHECK (pointsIncrease >= 0),
    salePercentage  NUMBER(5,2) DEFAULT 0 CHECK (salePercentage BETWEEN 0 AND 100)
);

CREATE TABLE PromotionTargets (
    targetID        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    targetType      VARCHAR2(50) NOT NULL, -- e.g., 'Genre', 'Movie', 'Category'
    targetValue     VARCHAR2(100) NOT NULL -- e.g., 'Horror', 'Action', 'All'
);

ALTER TABLE StorePromotions ADD (
    promotionType VARCHAR2(20) CHECK (promotionType IN ('Points', 'Discount'))
);

ALTER TABLE StorePromotions ADD (
    targetID    NUMBER NOT NULL REFERENCES PromotionTargets(targetID)
);

--option description to the storePromotion (Eg: Christmas Sale) - or could be used as description text on app
ALTER TABLE StorePromotions ADD (
    description VARCHAR2(255)
);

CREATE OR REPLACE TRIGGER trg_update_order_amount
AFTER INSERT OR UPDATE OR DELETE ON OrderDetails
DECLARE
  v_orderID Orders.orderID%TYPE;
  v_total NUMBER(8,2);
BEGIN
  -- Loop through affected orders
  FOR r IN (
    SELECT DISTINCT orderID FROM OrderDetails
  ) LOOP
    SELECT SUM(m.price * od.quantity)
    INTO v_total
    FROM OrderDetails od
    JOIN Movie m ON od.movieID = m.movieID
    WHERE od.orderID = r.orderID;

    UPDATE Orders
    SET amount = NVL(v_total, 0)
    WHERE orderID = r.orderID;
  END LOOP;
END;
/



